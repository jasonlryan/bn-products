import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export interface PDFContent {
  title: string;
  sections: Array<{
    title: string;
    content: string;
  }>;
  metadata?: {
    productId: string;
    compiledAt: string;
    contentType: string;
  };
}

/**
 * Generate a PDF from compiled content
 */
export async function generatePDF(content: PDFContent): Promise<Blob> {
  // Create a temporary container for the content
  const container = document.createElement('div');
  container.style.position = 'absolute';
  container.style.left = '-9999px';
  container.style.top = '0';
  container.style.width = '800px';
  container.style.backgroundColor = 'white';
  container.style.padding = '40px';
  container.style.fontFamily = 'Arial, sans-serif';
  container.style.fontSize = '12px';
  container.style.lineHeight = '1.6';
  container.style.color = '#333';

  // Add header
  const header = document.createElement('div');
  header.innerHTML = `
    <div style="border-bottom: 2px solid #4f46e5; padding-bottom: 20px; margin-bottom: 30px;">
      <h1 style="color: #4f46e5; font-size: 24px; margin: 0 0 10px 0;">${content.title}</h1>
      ${content.metadata ? `
        <div style="font-size: 11px; color: #666;">
          Product ID: ${content.metadata.productId} | 
          Compiled: ${new Date(content.metadata.compiledAt).toLocaleDateString()} |
          Type: ${content.metadata.contentType}
        </div>
      ` : ''}
    </div>
  `;
  container.appendChild(header);

  // Add sections
  content.sections.forEach((section, index) => {
    const sectionDiv = document.createElement('div');
    sectionDiv.style.marginBottom = '30px';
    sectionDiv.innerHTML = `
      <h2 style="color: #4f46e5; font-size: 18px; margin: 0 0 15px 0; border-bottom: 1px solid #e5e7eb; padding-bottom: 5px;">
        ${section.title}
      </h2>
      <div style="white-space: pre-wrap; font-size: 12px; line-height: 1.6;">
        ${section.content}
      </div>
    `;
    container.appendChild(sectionDiv);
  });

  // Add footer
  const footer = document.createElement('div');
  footer.style.borderTop = '1px solid #e5e7eb';
  footer.style.paddingTop = '20px';
  footer.style.marginTop = '30px';
  footer.style.fontSize = '10px';
  footer.style.color = '#666';
  footer.style.textAlign = 'center';
  footer.innerHTML = `
    Generated by BrilliantNoise Product Management System<br>
    ${new Date().toLocaleDateString()} at ${new Date().toLocaleTimeString()}
  `;
  container.appendChild(footer);

  // Add to document temporarily
  document.body.appendChild(container);

  try {
    // Convert to canvas
    const canvas = await html2canvas(container, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
      backgroundColor: '#ffffff',
      width: 800,
      height: container.scrollHeight,
    });

    // Create PDF
    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF('p', 'mm', 'a4');
    
    const imgWidth = 210; // A4 width in mm
    const pageHeight = 295; // A4 height in mm
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    let heightLeft = imgHeight;
    let position = 0;

    // Add first page
    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;

    // Add additional pages if needed
    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }

    // Convert to blob
    const pdfBlob = pdf.output('blob');
    return pdfBlob;
  } finally {
    // Clean up
    document.body.removeChild(container);
  }
}

/**
 * Download a PDF file
 */
export async function downloadPDF(content: PDFContent, filename?: string): Promise<void> {
  try {
    const pdfBlob = await generatePDF(content);
    const url = URL.createObjectURL(pdfBlob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename || `${content.metadata?.contentType || 'compiled'}_${content.metadata?.productId || 'content'}.pdf`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF');
  }
}

/**
 * Convert markdown content to plain text for PDF
 */
export function markdownToText(markdown: string): string {
  return markdown
    .replace(/^### (.*$)/gim, '$1') // Remove markdown headers
    .replace(/^## (.*$)/gim, '$1')
    .replace(/^# (.*$)/gim, '$1')
    .replace(/\*\*(.*?)\*\*/g, '$1') // Remove bold
    .replace(/\*(.*?)\*/g, '$1') // Remove italic
    .replace(/`(.*?)`/g, '$1') // Remove code
    .replace(/\[([^\]]+)\]\([^)]+\)/g, '$1') // Remove links
    .replace(/\n\s*\n/g, '\n\n') // Normalize line breaks
    .trim();
} 